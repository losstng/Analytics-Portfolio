# ==============================
# ðŸ“¦ Importing Libraries
# ==============================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Set plot aesthetics
sns.set(style='whitegrid', palette='muted')
plt.rcParams['figure.figsize'] = (12, 6)

# ==============================
# ðŸ§¼ Data Cleaning
# ==============================
# Load dataset
df = pd.read_csv("your_dataset.csv")  # Replace with actual path

# Preview and structure
print(df.head())
print(df.info())
print(df.describe())

# Handle missing values
df.dropna(subset=['important_column'], inplace=True)  # Drop rows missing crucial data
df['some_column'].fillna(df['some_column'].median(), inplace=True)  # Impute with median

# Convert data types
df['date_column'] = pd.to_datetime(df['date_column'])

# Remove duplicates
df.drop_duplicates(inplace=True)

# ==============================
# ðŸ§  Feature Engineering
# ==============================
# Create new variables
df['month'] = df['date_column'].dt.month
df['day_of_week'] = df['date_column'].dt.day_name()
df['is_weekend'] = df['day_of_week'].isin(['Saturday', 'Sunday']).astype(int)

# Conditional variable
df['high_value'] = np.where(df['revenue'] > df['revenue'].median(), 1, 0)

# Binning
df['age_group'] = pd.cut(df['age'], bins=[0, 18, 35, 60, 100], labels=['Teen', 'Young Adult', 'Adult', 'Senior'])

# ==============================
# ðŸ”¢ GroupBy and Aggregation
# ==============================
# Aggregation example
agg_df = df.groupby(['month', 'age_group'])['revenue'].agg(['mean', 'sum', 'count']).reset_index()
print(agg_df)

# Pivot Table
pivot_df = df.pivot_table(values='revenue', index='month', columns='age_group', aggfunc='mean')

# ==============================
# ðŸ“Š Visualizations with Seaborn
# ==============================

# 1. Distribution Plot
sns.histplot(df['revenue'], kde=True, bins=30)
plt.title('Revenue Distribution')
plt.show()

# 2. Boxplot
sns.boxplot(x='age_group', y='revenue', data=df)
plt.title('Revenue by Age Group')
plt.show()

# 3. Countplot
sns.countplot(x='day_of_week', data=df, order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
plt.title('Day of Week Distribution')
plt.xticks(rotation=45)
plt.show()

# 4. Correlation Heatmap
plt.figure(figsize=(10, 8))
corr = df.select_dtypes(include=[np.number]).corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# 5. Time Series Line Plot
df.set_index('date_column')['revenue'].resample('W').mean().plot()
plt.title('Weekly Average Revenue Over Time')
plt.xlabel('Date')
plt.ylabel('Revenue')
plt.show()

# 6. Scatter Plot with Regression
sns.lmplot(x='marketing_spend', y='revenue', hue='age_group', data=df, aspect=1.5)
plt.title('Marketing Spend vs Revenue')
plt.show()

# ==============================
# ðŸ“¤ Export Cleaned Data
# ==============================
df.to_csv("cleaned_dataset.csv", index=False)
agg_df.to_csv("aggregated_data.csv", index=False)
